{"version":3,"sources":["screens/App/components/Entry.js","screens/App/components/Get-in-touch.js","screens/App/index.js","serviceWorker.js","index.js"],"names":["Entry","_ref","entry","react_default","a","createElement","className","position","company","from","links","href","display","GetInTouchLink","link","target","rel","GetInTouch","Fragment","map","key","entries","App","_useState","useState","_useState2","Object","slicedToArray","loading","setLoading","opacity","useSpring","useEffect","timer","setTimeout","clearTimeout","web","div","style","interpolate","o","Get_in_touch","components_Entry","Boolean","window","location","hostname","match","ReactDOM","render","screens_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ace0be56.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Entry({entry}) {\n  return (\n    <div className=\"Entry\">\n      <h4 className=\"rubik\">{entry.position} @ {entry.company}</h4>\n      <div className=\"Entry-from\">\n        <h5 className=\"roboto-mono light\">{entry.from}</h5>\n      </div>\n    </div>\n  )\n}\n\nexport default Entry;","import React from 'react'\n\nconst links = [\n  {\n    href: `https://github.com/schweller`,\n    display: `Github` \n  },\n  {\n    href: `https://codepen.io/schweller/`,\n    display: `Codepen` \n  },\n  {\n    href: `https://thesunda.itch.io/`,\n    display: `My games` \n  },\n  {\n    href: `https://www.linkedin.com/in/ischweller/`,\n    display: `LinkedIn`\n  }\n]\n\nfunction GetInTouchLink({link}) {\n  return (\n    <li>\n      <a \n        className=\"underline-wave\"\n        target=\"_blank\" \n        rel=\"noopener noreferrer\"\n        href={link.href}>\n        {link.display}\n      </a>\n    </li>\n  )  \n}\n\nfunction GetInTouch() {\n  return (\n    <>\n      <ul>\n        {links.map((link, key) => <GetInTouchLink key={key} link={link}/>)}\n      </ul>\n      What's next? <a className=\"underline-wave\" href=\"mailto:iscmendonca@gmail.com\">Say hello</a>! \n    </>\n  )\n}\n\nexport default GetInTouch","import React, { useEffect, useState } from 'react';\nimport { useSpring, animated } from 'react-spring'\nimport Particles from './components/Background'\nimport Entry from './components/Entry'\nimport GetInTouch from './components/Get-in-touch'\nimport './App.css';\n\nconst entries = [\n  {\n    position: \"Senior Software Engineer\",\n    company: \"Fanatics\",\n    from: \"September 2017 - Current\"\n  },\n  {\n    position: \"Software Engineer\",\n    company: \"Avenue Code\",\n    from: \"June 2015 - July 2017\"\n  },\n  {\n    position: \"Frontend Developer\",\n    company: \"PSafe Tecnologia\",\n    from: \"September 2014 - June 2015\"\n  },\n  {\n    position: \"Frontend Developer\",\n    company: \"Infoglobo\",\n    from: \"February 2011 - September 2014\"\n  }  \n]\n\nfunction App () {\n  const [loading, setLoading] = useState(true)\n  \n  const { opacity } = useSpring({\n    opacity: loading ? 0 : 1\n  })\n\n  //TODO show a loader\n  useEffect(() => {\n    let timer = setTimeout(() => setLoading(false), 800)\n    return () => clearTimeout(timer)\n  }, [])\n\n  return loading ?\n      <div className=\"loader\">Loading</div> :\n      <animated.div className=\"App\" style={{opacity: opacity.interpolate(o => 0 + o) }}>\n        {/* <Particles /> */}\n        <div className=\"Hero\">\n          <div className=\"Row\">\n            <div className=\"Hero-intro Column\">\n              <div className=\"roboto-mono light align-left\">\n                <p>Hello! I'm Inacio. I work and freelance as software engineer</p>\n                <p>I've proudly collaborated with awesome companies</p>\n                <p>4th on Alakajam, a game jam, with <a \n                    className=\"underline-wave\" \n                    target=\"_blank\" \n                    rel=\"noopener noreferrer\"\n                    href=\"https://thesunda.itch.io/cast-die-repeat\">\n                    Cast Die Repeat\n                  </a>\n                </p>\n              </div>       \n            </div>\n            <div className=\"Hero-contact Column\">\n              <GetInTouch />\n            </div>\n          </div>\n        </div>\n        <div className=\"Scroll\">\n          <h3 className=\"roboto-mono light\">work experience></h3>\n          {entries.map((entry, key) => {\n            return <Entry key={key} entry={entry}/>\n          })}\n          <div className=\"Footer\">\n            <p className=\"roboto-mono light\">Made by yours truly. Â© 2019</p>\n          </div>\n        </div>\n      </animated.div>\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './screens/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}