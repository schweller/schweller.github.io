{"version":3,"sources":["Background.js","App.js","serviceWorker.js","index.js"],"names":["Vis","count","useRef","React","useEffect","useState","mount","_useState","_useState2","Object","slicedToArray","isAnimating","setAnimating","controls","frameId","width","current","clientWidth","height","clientHeight","mouseX","scene","THREE","camera","position","y","z","positions","Float32Array","numParticles","scales","AMOUNTX","i","j","ix","iy","AMOUNTY","geometry","addAttribute","color","lerp","material","uniforms","value","vertexShader","fragmentShader","particles","renderer","antialias","setPixelRatio","window","devicePixelRatio","add","setSize","renderScene","x","scrollY","lookAt","attributes","array","scale","Math","sin","needsUpdate","render","handleResize","aspect","updateProjectionMatrix","animate","requestAnimationFrame","start","stop","cancelAnimationFrame","appendChild","domElement","addEventListener","e","clientX","innerWidth","clientY","innerHeight","touches","length","preventDefault","pageX","pageY","removeEventListener","removeChild","remove","dispose","react_default","a","createElement","className","ref","onClick","App","loading","setLoading","setTimeout","Background","Boolean","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sOAoLeA,EAhKH,WACV,IAAIC,EAAM,EACFC,EAAgCC,IAAhCD,OAAQE,EAAwBD,IAAxBC,UAAWC,EAAaF,IAAbE,SACrBC,EAAQJ,EAAO,MAHLK,EAIoBF,GAAS,GAJ7BG,EAAAC,OAAAC,EAAA,EAAAD,CAAAF,EAAA,GAITI,EAJSH,EAAA,GAIII,EAJJJ,EAAA,GAKVK,EAAWX,EAAO,MAwJxB,OAtJAE,EAAU,WACR,IAIIU,EAJAC,EAAQT,EAAMU,QAAQC,YACtBC,EAASZ,EAAMU,QAAQG,aACvBC,EAAS,EAKPC,EAAQ,IAAIC,IACZC,EAAS,IAAID,IAAwB,GAAIP,EAAQG,EAAQ,EAAG,KAClEK,EAAOC,SAASC,EAAI,IACpBF,EAAOC,SAASE,EAAI,IAMpB,IAJA,IACIC,EAAY,IAAIC,aAAcC,MAChCC,EAAS,IAAIF,aAFMG,KAGjBC,EAAI,EAAGC,EAAI,EACLC,EAAK,EAAGA,EAXgB,IAWFA,IAC9B,IAAM,IAAIC,EAAK,EAAGA,EAZ6B,IAYfA,IAC9BR,EAAWK,GAbI,IAaEE,EAAsBH,KACvCJ,EAAWK,EAAI,GAAM,EACrBL,EAAWK,EAAI,GAfA,IAeMG,EAAsBC,IAC3CN,EAAQG,GAAM,EACdD,GAAK,EACLC,IAIJ,IAAMI,EAAW,IAAIf,IACrBe,EAASC,aAAc,WAAY,IAAIhB,IAAuBK,EAAW,IACzEU,EAASC,aAAc,QAAS,IAAIhB,IAAuBQ,EAAQ,IACnE,IAAMS,EAAQ,IAAIjB,IAAY,gBAC9BiB,EAAMC,KAAK,IAAIlB,IAAY,oBAAqB,IAEhD,IAAMmB,EAAW,IAAInB,IAAsB,CACzCoB,SAAU,CACRH,MAAO,CAAEI,MAAOJ,IAElBK,aA9DY,wPA+DZC,eAtDc,wLAyDZC,EAAY,IAAIxB,IAAce,EAAUI,GAEtCM,EAAW,IAAIzB,IAAoB,CAAE0B,WAAW,IACtDD,EAASE,cAAeC,OAAOC,kBAC/B9B,EAAM+B,IAAIN,GACVC,EAASM,QAAQtC,EAAOG,GAExB,IAAMoC,EAAc,WAElB/B,EAAOC,SAAS+B,GAAsC,KAA/BnC,EAASG,EAAOC,SAAS+B,GAC5ChC,EAAOC,SAASC,EAAE,MACpBF,EAAOC,SAASC,EAAE,KAEpBF,EAAOC,SAASC,GAAqD,MAA5B,GAAfyB,OAAOM,QAAcjC,EAAOC,SAASC,GAC/DF,EAAOkC,OAAQpC,EAAMG,UAIrB,IAHA,IAAIG,EAAYmB,EAAUT,SAASqB,WAAWlC,SAASmC,MACnD7B,EAASgB,EAAUT,SAASqB,WAAWE,MAAMD,MAC7C3B,EAAI,EAAGC,EAAI,EACLC,EAAK,EAAGA,EAtDc,IAsDAA,IAC9B,IAAM,IAAIC,EAAK,EAAGA,EAvD2B,IAuDbA,IAC9BR,EAAWK,EAAI,GAA2C,GAAnC6B,KAAKC,IAAsB,IAAf5B,EAAKjC,IACD,GAAnC4D,KAAKC,IAAsB,IAAf3B,EAAKlC,IACrB6B,EAAQG,GAAiD,GAAzC4B,KAAKC,IAAsB,IAAf5B,EAAKjC,IAAkB,GACN,GAAzC4D,KAAKC,IAAsB,IAAf3B,EAAKlC,IAAkB,GACvC+B,GAAK,EACLC,IAGJa,EAAUT,SAASqB,WAAWlC,SAASuC,aAAc,EACrDjB,EAAUT,SAASqB,WAAWE,MAAMG,aAAc,EAClDhB,EAASiB,OAAO3C,EAAOE,GACvBtB,GAAO,KAGHgE,EAAe,WACnBlD,EAAQT,EAAMU,QAAQC,YACtBC,EAASZ,EAAMU,QAAQG,aACvB4B,EAASM,QAAQtC,EAAOG,GACxBK,EAAO2C,OAASnD,EAAQG,EACxBK,EAAO4C,yBACPb,KAwBIc,EAAU,SAAVA,IACJd,IACAxC,EAAUoC,OAAOmB,sBAAsBD,IAGnCE,EAAQ,WACPxD,IACHA,EAAUuD,sBAAsBD,KAI9BG,EAAO,WACXC,qBAAqB1D,GACrBA,EAAU,MAYZ,OATAR,EAAMU,QAAQyD,YAAY1B,EAAS2B,YACnCxB,OAAOyB,iBAAiB,SAAUV,GAClCf,OAAOyB,iBAAiB,YAvCA,SAACC,GACvBxD,EAASwD,EAAEC,QAAU3B,OAAO4B,WAAa,EAChCF,EAAEG,QAAU7B,OAAO8B,cAsC9B9B,OAAOyB,iBAAiB,aAnCC,SAACC,GACC,IAArBA,EAAEK,QAAQC,SACZN,EAAEO,iBACF/D,EAASwD,EAAEK,QAAQ,GAAGG,MAAQlC,OAAO4B,WAAa,EACzCF,EAAEK,QAAQ,GAAGI,MAAQnC,OAAO8B,eAgCzC9B,OAAOyB,iBAAiB,YA5BA,SAACC,GACE,IAArBA,EAAEK,QAAQC,SACZN,EAAEO,iBACF/D,EAASwD,EAAEK,QAAQ,GAAGG,MAAQlC,OAAO4B,WAAa,EACzCF,EAAEK,QAAQ,GAAGI,MAAQnC,OAAO8B,eAyBzCV,IAEAzD,EAASG,QAAU,CAAEsD,QAAOC,QAErB,WACLA,IACArB,OAAOoC,oBAAoB,SAAUrB,GACrC3D,EAAMU,QAAQuE,YAAYxC,EAAS2B,YAEnCrD,EAAMmE,OAAO1C,GACbT,EAASoD,UACThD,EAASgD,YAEV,IAEHrF,EAAU,WACJO,EACFE,EAASG,QAAQsD,QAEjBzD,EAASG,QAAQuD,QAElB,CAAC5D,IAEG+E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMC,IAAKxF,EAAOyF,QAAS,kBAAMnF,GAAcD,aC/IxDqF,MA9Bf,WAAgB,IAAAzF,EACgBF,oBAAS,GADzBG,EAAAC,OAAAC,EAAA,EAAAD,CAAAF,EAAA,GACP0F,EADOzF,EAAA,GACE0F,EADF1F,EAAA,GAQd,OAJAJ,oBAAU,WACR+F,WAAWD,GAAW,GAAQ,MAC7B,IAEID,EACHP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,WACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACQ,EAAD,MACAV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACbH,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,0EACAF,EAAAC,EAAAC,cAAA,qFAGJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACbH,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,0EACAF,EAAAC,EAAAC,cAAA,uFCfQS,QACW,cAA7BnD,OAAOoD,SAASC,UAEe,UAA7BrD,OAAOoD,SAASC,UAEhBrD,OAAOoD,SAASC,SAASC,MACvB,2DCZNC,IAASzC,OAAO0B,EAAAC,EAAAC,cAACc,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.239a9250.chunk.js","sourcesContent":["import React from 'react';\nimport * as THREE from 'three'\n\nconst vertexShader = ` \n\t\t\tattribute float scale;\n\t\t\tvoid main() {\n\t\t\t\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\tgl_PointSize = scale * ( 300.0 / - mvPosition.z );\n\t\t\t\tgl_Position = projectionMatrix * mvPosition;\n\t\t\t}\n`\n\nconst fragmentShader = `\n\t\t\tuniform vec3 color;\n\t\t\tvoid main() {\n\t\t\t\tif ( length( gl_PointCoord - vec2( 0.5, 0.5 ) ) > 0.475 ) discard;\n\t\t\t\tgl_FragColor = vec4( color, 1.0 );\n\t\t\t}\n`\n\nconst Vis = () => {\n  let count=0\n  const { useRef, useEffect, useState } = React\n  const mount = useRef(null)\n  const [isAnimating, setAnimating] = useState(true)\n  const controls = useRef(null)\n  \n  useEffect(() => {\n    let width = mount.current.clientWidth\n    let height = mount.current.clientHeight\n    let mouseX = 1\n    let mouseY = 0 \n    let frameId\n    const SEPARATION = 100, AMOUNTX = 300, AMOUNTY = 200\n    \n    const scene = new THREE.Scene()\n    const camera = new THREE.PerspectiveCamera(75, width / height, 1, 10000)\n    camera.position.y = 1000\n    camera.position.z = 1000\n    \n    const numParticles = AMOUNTX * AMOUNTY\n    var positions = new Float32Array( numParticles * 3 )\n\t\tvar scales = new Float32Array( numParticles )\n    var i = 0, j = 0;\n    for ( var ix = 0; ix < AMOUNTX; ix ++ ) {\n      for ( var iy = 0; iy < AMOUNTY; iy ++ ) {\n        positions[ i ] = ix * SEPARATION - ( ( AMOUNTX * SEPARATION ) / 2 ); // x\n        positions[ i + 1 ] = 0; // y\n        positions[ i + 2 ] = iy * SEPARATION - ( ( AMOUNTY * SEPARATION ) / 2 ); // z\n        scales[ j ] = 1;\n        i += 3;\n        j ++;\n      }\n    }\n    \n    const geometry = new THREE.BufferGeometry();\n    geometry.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ))\n    geometry.addAttribute( 'scale', new THREE.BufferAttribute( scales, 1 ) )\n    const color = new THREE.Color(\"rgb(255,0,0)\")\n    color.lerp(new THREE.Color(\"rgb(255,100,120)\"), 0.5)\n    \n    const material = new THREE.ShaderMaterial( {\n      uniforms: {\n        color: { value: color }\n      },\n      vertexShader: vertexShader,\n      fragmentShader: fragmentShader\n    } );\n\n    let particles = new THREE.Points( geometry, material );\n    \n    const renderer = new THREE.WebGLRenderer({ antialias: true })\n    renderer.setPixelRatio( window.devicePixelRatio );\n    scene.add(particles) \n    renderer.setSize(width, height)\n\n    const renderScene = () => {\n      \n      camera.position.x += ( mouseX - camera.position.x ) * .05;\n      if (camera.position.y<1000) {\n        camera.position.y=1000\n      }\n      camera.position.y += ( - (window.scrollY*10) - camera.position.y ) * .05;\n      camera.lookAt( scene.position );\n      var positions = particles.geometry.attributes.position.array;\n      var scales = particles.geometry.attributes.scale.array;\n      var i = 0, j = 0;\n      for ( var ix = 0; ix < AMOUNTX; ix ++ ) {\n        for ( var iy = 0; iy < AMOUNTY; iy ++ ) {\n          positions[ i + 1 ] = ( Math.sin( ( ix + count ) * 0.3 ) * 50 ) +\n            ( Math.sin( ( iy + count ) * 0.5 ) * 50 );\n          scales[ j ] = ( Math.sin( ( ix + count ) * 0.1 ) + 1 ) * 3 +\n            ( Math.sin( ( iy + count ) * 0.1 ) + 1 ) * 3;\n          i += 3;\n          j ++;\n        }\n      }\n      particles.geometry.attributes.position.needsUpdate = true;\n      particles.geometry.attributes.scale.needsUpdate = true;\n      renderer.render(scene, camera)\n      count+=0.05\n    }\n\n    const handleResize = () => {\n      width = mount.current.clientWidth \n      height = mount.current.clientHeight\n      renderer.setSize(width, height)\n      camera.aspect = width / height\n      camera.updateProjectionMatrix()\n      renderScene()\n    }\n    \n    const handleMouseMove = (e) => {\n      mouseX = e.clientX - window.innerWidth / 2\n      mouseY = e.clientY - window.innerHeight / 2\n    }\n    \n    const handleTouchStart = (e) => {\n      if (e.touches.length === 1) {\n        e.preventDefault();\n        mouseX = e.touches[0].pageX - window.innerWidth / 2\n        mouseY = e.touches[0].pageY - window.innerHeight / 2\n      }\n    }\n    \n    const handleTouchMove = (e) => {\n      if (e.touches.length === 1) {\n        e.preventDefault();\n        mouseX = e.touches[0].pageX - window.innerWidth / 2\n        mouseY = e.touches[0].pageY - window.innerHeight / 2\n      }\n    }   \n    \n    const animate = () => {\n      renderScene()\n      frameId = window.requestAnimationFrame(animate)\n    }\n\n    const start = () => {\n      if (!frameId) {\n        frameId = requestAnimationFrame(animate)\n      }\n    }\n\n    const stop = () => {\n      cancelAnimationFrame(frameId)\n      frameId = null\n    }\n\n    mount.current.appendChild(renderer.domElement)\n    window.addEventListener('resize', handleResize)\n    window.addEventListener('mousemove', handleMouseMove)\n    window.addEventListener('touchstart', handleTouchStart)\n    window.addEventListener('touchmove', handleTouchMove)\n    start()\n\n    controls.current = { start, stop }\n    \n    return () => {\n      stop()\n      window.removeEventListener('resize', handleResize)\n      mount.current.removeChild(renderer.domElement)\n\n      scene.remove(particles)\n      geometry.dispose()\n      material.dispose()\n    }\n  }, [])\n\n  useEffect(() => {\n    if (isAnimating) {\n      controls.current.start()\n    } else {\n      controls.current.stop()\n    }\n  }, [isAnimating])\n  \n  return <div className=\"vis\" ref={mount} onClick={() => setAnimating(!isAnimating)} />\n}\n\nexport default Vis\n","import React, { useEffect, useState } from 'react';\nimport Vis from './Background'\nimport './App.css';\n\nfunction App () {\n  const [loading, setLoading] = useState(true)\n  \n  //TODO show a loader\n  useEffect(() => {\n    setTimeout(setLoading(false), 1000)\n  }, [])\n\n  return loading ?\n      <div className=\"loader\">Loading</div> :\n      <div className=\"App\">\n        <Vis/>\n        <div className=\"App-hero\">\n          <div className=\"cutive-mono align-left\">\n            <p>Hi, I'm Inacio!</p>\n            <p>I work and freelance as software engineer and game developer.</p>\n            <p>Recently I placed 4th on Alakajam, a game jam, with \"Cast Die Repeat\".</p>\n          </div>       \n        </div>\n        <div className=\"App-hero\">\n          <div className=\"cutive-mono align-left\">\n            <p>Hi, I'm Inacio!</p>\n            <p>I work and freelance as software engineer and game developer.</p>\n            <p>Recently I placed 4th on Alakajam, a game jam, with \"Cast Die Repeat\".</p>\n          </div>       \n        </div>\n      </div>\n     \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}